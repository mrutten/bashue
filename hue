#!/bin/bash

##################################################
#
# Control Philips Hue
#
# Authors
# Mark Rutten 2024-03-21 - V 1.0
#
##################################################

# Color constants
BLACK='\033[30m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
MAGENTA='\033[35m'
CYAN='\033[36m'
WHITE='\033[37m'

# Attribute constants
RESET='\033[0m'
BOLD='\033[1m'
DIM='\033[2m'
ITALIC='\033[3m'
UNDERLINE='\033[4m'
SLOW_BLINK='\033[5m'
FAST_BLINK='\033[6m'
INVERT='\033[7m'
HIDE='\033[8m'
STRIKE='\033[9m'

# Program Constants
BRIDGE_IP="ENTER BRIDGE IP ADDRESS HERE"
API_KEY="ENTER API KEY HERE"

# Create a LIGHTS array
mapfile -t RESPONSE < <(curl -s -H "Content-Type: application/json" http://${BRIDGE_IP}/api/${API_KEY}/lights/ | jq -r 'keys_unsorted[] as $key | "\($key): \(.[$key].name)"')
declare -a LIGHTS
for item in "${RESPONSE[@]}"; do
	index=$(echo "$item" | cut -d ':' -f 1)
	value=$(echo "$item" | cut -d ':' -f 2-)
	LIGHTS[$index]="$value"
done

# Functions
ok() {
	echo -en "${BOLD}${GREEN}OK:${RESET} "
}

info() {
	echo -en "${BOLD}${WHITE}INFO:${RESET} "
}

warn() {
	echo -en "${BOLD}${YELLOW}WARNING:${RESET} "
}

error() {
	echo -en "${BOLD}${RED}ERROR:${RESET} "
}

menu_base() {
	clear
	printf '1. Rooms\n'
	printf '2. Lights\n'
	printf '3. Get state\n'
	printf 'q. Quit\n'
	read -p "> " CHOICE
	case $CHOICE in
	1)
		menu_rooms
		;;
	2)
		menu_lights
		;;
	3)
		get_states
		;;
	q)
		exit 0
		;;
	*)
		echo "Invalid option. Press Enter to continue..."
		read -r
		menu_base
		;;
	esac
}

menu_rooms() {
	clear
	local CHOICE
	printf 'Toggle:\n\n'
	printf '1. Livingroom\n'
	printf '2. Kitchen\n'
	printf '3. Guestroom\n'
	printf '4. Bedroom\n'
	printf '5. Bathroom\n'
	printf '6. Toilet\n'
	printf '7. Hallway\n'
	printf '8. All lights\n'
	printf 'b. Back to parent menu\n'
	printf 'q. quit\n'
	read -p "> " CHOICE
	case $CHOICE in
	1)
		toggle_state 2
		toggle_state 10
		menu_rooms
		;;
	2)
		toggle_state 3
		toggle_state 4
		menu_rooms
		;;
	3)
		toggle_state 5
		menu_rooms
		;;
	4)
		toggle_state 6
		menu_rooms
		;;
	5)
		toggle_state 7
		menu_rooms
		;;
	6)
		toggle_state 8
		menu_rooms
		;;
	7)
		toggle_state 9
		menu_rooms
		;;
	8)
		for ((i = 2; i <= 9; i++)); do
			toggle_state $i
		done
		menu_rooms
		;;
	b)
		menu_base
		;;
	q)
		exit 0
		;;
	*)
		echo "Invalid option. Press Enter to continue..."
		read -r
		menu_rooms
		;;
	esac
}

menu_lights() {
	clear
	local CHOICE
	printf 'Toggle:\n\n'
	for i in "${!LIGHTS[@]}"; do
		printf "$i. ${LIGHTS[i]}\n"
	done
	printf 'b. Back to parent menu\n'
	printf 'q: quit\n'
	read -p "> " CHOICE
	case $CHOICE in
	[2-9])
		toggle_state $CHOICE
		menu_lights
		;;
	b)
		menu_base
		;;
	q)
		exit 0
		;;
	*)
		echo "Invalid option. Press Enter to continue..."
		read -r
		menu_lights
		;;
	esac
}

get_states() {
	clear
	for i in "${!LIGHTS[@]}"; do
		LIGHT=$i
		RESPONSE=$(curl -s -X GET http://${BRIDGE_IP}/api/${API_KEY}/lights/$LIGHT)
		STATE=$(echo "$RESPONSE" | jq -r '.state.on')

		if [ "$STATE" = "true" ]; then
			printf "$i. ${LIGHTS[i]} on\n"
		else
			printf "$i. ${LIGHTS[i]} off\n"
		fi
	done
}

toggle_state() {
	local LIGHT=$1
	RESPONSE=$(curl -s -X GET http://${BRIDGE_IP}/api/${API_KEY}/lights/$LIGHT)
	STATE=$(echo "$RESPONSE" | jq -r '.state.on')

	if [ "$STATE" = "true" ]; then
		set_state $LIGHT '{"on":false}'
	else
		set_state $LIGHT '{"on":true}'
	fi
}

set_state() {
	local LIGHT=$1
	local BODY=$2
	curl -s -X PUT -d "${BODY}" http://${BRIDGE_IP}/api/${API_KEY}/lights/$LIGHT/state >/dev/null 2>&1
}

main() {
	menu_base
}

# Runtime
main
